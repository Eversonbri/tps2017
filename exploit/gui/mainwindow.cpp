#include <QDebug>
#include <QKeyEvent>
#include <QSound>
#include <QSoundEffect>
#include <QThread>
#include <iostream>
#include <assert.h>
#include "mainwindow.h"
#include "ui_mainwindow.h"


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    visibilidadeInicial();

    candidatos.insert("98", QPair<QString,QString>("Luke Skywalker", "Light Side"));
    candidatos.insert("99", QPair<QString,QString>("Darth Vader", "Dark Side"));

    foreach (const QString &numero, candidatos.keys()) {
        votos_candidatos[numero] = 0;
    }
    boletimUrna("ZERÉSIMA");
}

void MainWindow::visibilidadeInicial() {
    state = WAIT_DIG_1;
    ui->fim->setVisible(false);
    ui->seu_voto->setVisible(false);

    ui->cap_numero->setVisible(false);
    ui->dig1->setText("");
    ui->dig2->setText("");
    ui->cap_nome->setVisible(false);
    ui->nome->setVisible(false);
    ui->nome->setText("");
    ui->cap_partido->setVisible(false);
    ui->partido->setVisible(false);
    ui->partido->setText("");

    ui->numero_errado->setVisible(false);
    ui->voto_nulo->setVisible(false);

    ui->foto->setVisible(false);
    ui->foto_cargo->setVisible(false);
    ui->foto_mold->setVisible(false);
    ui->foto_vice->setVisible(false);
    ui->foto_vice_cargo->setVisible(false);
    ui->foto_vice_mold->setVisible(false);

    ui->rodape_1->setVisible(false);
    ui->rodape_2->setVisible(false);
    ui->rodape_3->setVisible(false);
    ui->rodape_4->setVisible(false);
}

void MainWindow::visibilidadeCandidato() {
    state = SHOW_CAND;
    ui->fim->setVisible(false);
    ui->seu_voto->setVisible(true);

    ui->cap_numero->setVisible(true);
    ui->cap_nome->setVisible(true);
    ui->nome->setVisible(true);
    ui->cap_partido->setVisible(true);
    ui->partido->setVisible(true);

    ui->numero_errado->setVisible(false);
    ui->voto_nulo->setVisible(false);

    ui->foto->setVisible(true);
    ui->foto_cargo->setVisible(true);
    ui->foto_mold->setVisible(true);
    ui->foto_vice->setVisible(true);
    ui->foto_vice_cargo->setVisible(true);
    ui->foto_vice_mold->setVisible(true);

    ui->rodape_1->setVisible(true);
    ui->rodape_2->setVisible(true);
    ui->rodape_3->setVisible(true);
    ui->rodape_4->setVisible(true);
}

void MainWindow::visibilidadeNulo() {
    state = SHOW_CAND;
    ui->fim->setVisible(false);
    ui->seu_voto->setVisible(true);

    ui->cap_numero->setVisible(true);
    ui->cap_nome->setVisible(false);
    ui->nome->setVisible(false);
    ui->cap_partido->setVisible(false);
    ui->partido->setVisible(false);

    ui->numero_errado->setVisible(true);
    ui->voto_nulo->setVisible(true);

    ui->foto->setVisible(false);
    ui->foto_cargo->setVisible(false);
    ui->foto_mold->setVisible(false);
    ui->foto_vice->setVisible(false);
    ui->foto_vice_cargo->setVisible(false);
    ui->foto_vice_mold->setVisible(false);

    ui->rodape_1->setVisible(true);
    ui->rodape_2->setVisible(true);
    ui->rodape_3->setVisible(true);
    ui->rodape_4->setVisible(true);
}

void MainWindow::visibilidadeFim() {
    state = END;
    ui->fim->setVisible(true);
}

void MainWindow::keyPressEvent(QKeyEvent *event)
{
    const int key = event->key();
    qDebug() << "key code: " << key;

    int number = -1;
    if (key >= Qt::Key_0 && key <= Qt::Key_9) {
        number = key - Qt::Key_0;
    }

    if (key == Qt::Key_Escape) {
        visibilidadeInicial();
    }
    else if (state == WAIT_DIG_1 && number != -1) {
        ui->dig1->setText(QStringLiteral("%1").arg(number));
        state = WAIT_DIG_2;
    }
    else if (state == WAIT_DIG_2 && number != -1) {
        ui->dig2->setText(QStringLiteral("%1").arg(number));

        QString voto = ui->dig1->text() + ui->dig2->text();
        if (candidatos.contains(voto)) {
            const QPair<QString,QString> dadosCand = candidatos[voto];
            ui->nome->setText(dadosCand.first);
            ui->partido->setText(dadosCand.second);
            ui->foto->setPixmap(QPixmap(QStringLiteral(":/%1cand.jpg").arg(voto)));
            ui->foto_vice->setPixmap(QPixmap(QStringLiteral(":/%1vice.jpg").arg(voto)));
            visibilidadeCandidato();
        }
        else {
            visibilidadeNulo();
        }
    }
    else if (state == SHOW_CAND && key == Qt::Key_Space) {
        QString voto = ui->dig1->text() + ui->dig2->text();
        TipoVoto tipo = candidatos.contains(voto) ? VOTO_NORMAL : VOTO_NULO;
        std::string svoto(voto.toStdString());

        InfoEleitor info;
        info.AdicionaVoto(PRESIDENTE, tipo, svoto);
        contabilizaCedula(info.cedula);

        visibilidadeFim();
        QSoundEffect *sound = new QSoundEffect(this);
        connect(sound, SIGNAL(playingChanged()), this, SLOT(soundPlayingChanged()));
        sound->setSource(QUrl::fromLocalFile(":/fim.wav"));
        sound->play();
    }
}

void MainWindow::soundPlayingChanged()
{
    QSoundEffect *sound = qobject_cast<QSoundEffect *>(sender());
    if (!sound->isPlaying()) {
        sound->deleteLater();
        visibilidadeInicial();
    }
}

void MainWindow::contabilizaCedula(Cedula &cedula)
{
    assert(("Erro de consistência: cédula vazia", cedula.vetor.size() != 0));

    for (const Voto& voto : cedula.vetor) {
        if (voto.cargo == PRESIDENTE) {
            if (voto.tipo == VOTO_NULO) {
                votos_nulos++;
            }
            else if (voto.tipo == VOTO_NORMAL) {
                QString v = QString::fromStdString(voto.voto);
                votos_candidatos[v]++;
            }
        }
    }
}

void MainWindow::boletimUrna(const char *titulo)
{
    std::cerr << std::endl << std::endl;
    std::cout << titulo << std::endl << std::endl;
    for (QHash<QString, int>::iterator i = votos_candidatos.begin(); i != votos_candidatos.end(); ++i) {
        std::cout << "Votos para " << i.key().toStdString() << ": " << i.value() << std::endl;
    }
    std::cout << "Votos nulos: " << votos_nulos << std::endl << std::endl << std::endl;
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    boletimUrna();
}

MainWindow::~MainWindow()
{
    delete ui;
}
