#include <stdint.h>
#include <iostream>
#include <vector>

int hkdf(const uint8_t *in, uint8_t *out);

struct Voto {
    uint8_t cargo;
    int tipo;
    std::string voto;

    Voto(uint8_t cargo,
         int tipo,
         std::string &voto)
    {
        this->cargo = cargo;
        this->tipo = tipo;
        this->voto = voto;
    }
};

struct Cedula {
    std::vector<Voto> vetor;

    void AdicionaVoto(Voto voto) {
        vetor.push_back(voto);
    }
};

struct InfoEleitor {
    struct Cedula *cedula;

    InfoEleitor() {
        cedula = new Cedula;
    }

    void AdicionaVoto(uint8_t cargo,
                      int tipo,
                      std::string &voto)
    {
        cedula->AdicionaVoto(Voto(cargo, tipo, voto));
        LogaVoto(cargo, tipo);
    }

    void LogaVoto(uint8_t cargo,
                  int tipo)
    {
        std::cerr << "Registrado voto para cargo " << int(cargo)
                  << " do tipo " << int(tipo) << std::endl;
    }
};

int main() {
    InfoEleitor info;

    uint8_t hdkf_in[32], hkdf_out[32];
    hkdf(hdkf_in, hkdf_out);

    std::string voto;

    // votos de teste
    voto = "00"; info.AdicionaVoto(0, 0, voto);
    voto = "10"; info.AdicionaVoto(0, 0, voto);
    voto = "20"; info.AdicionaVoto(0, 0, voto);

    std::cout << std::endl
              << "Votos registrados:"
              << std::endl;

    for (auto voto : info.cedula->vetor) {
        std::cout << " - voto para '" << voto.voto << "'" << std::endl;
    }

    return 0;
}
